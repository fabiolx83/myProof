Variable<Term<Token
Statement<Premise<Token
Proof<Token

blank:Premise
comma:Premise->Premise->Premise
sequent:Premise->Statement->Proof
given:Token->Token
forall:Variable->Statement->Statement
check:Statement->Premise->Premise
in:Term->Term->Statement
class:Variable->Statement->Term
bigcup:Term->Term
input_term:Variable->Term->Term


assume statement S primitive_assumption §0
equal_definition axiom forall x forall y iff equal x y forall z iff in z x in z y

iff_implies_then
0   proof   statement P
            iff statement A
                statement B
1   #0  #1  §0
2   iff_left_elimination    §0
                            assume  §1
3   then_introduction   §2
                        §1

comma   statement S statement S =   statement S
comma   blank   statement   S   =   statement S

axiom
0   statement   A
1   proof   blank   §0

assume
0   statement   A
1   proof   §0  §0

and_introduction
0   proof   premise P
    statement   A
1   proof   premise Q
    statement   B
2   comma   #0  §0
            #0  §1
3   and #1  §0
        #1  §1
4   proof   §2  §3

and_left_elimination
0   proof   premise P
            statement   and statement   A
                            statement   B
1   proof   #0  §0
            #0  #0  #1  §0